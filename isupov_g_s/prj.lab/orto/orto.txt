#include <iostream>
#include <array>

namespace geo2d::orto {
    class Point {
    public:
        Point() = default;

        Point(double x, double y) : x(x), y(y) {}

        friend std::ostream& operator<<(std::ostream& out, const Point& a) {
            out << "Point.x: " << a.x << " Point.y: " << a.y << "\n";
            return out;
        }

        double x;
        double y;
    };

    class Quad {
    public:
        Quad() = default;

        Quad(Quad& quad) = default;

        ~Quad() = default;

        Quad(Point p1, Point p2, Point p3, Point p4) : p1(p1), p2(p2), p3(p3), p4(p4) {}

        virtual Point top() {
            Point tempPoint = p1;
            std::array<Point, 3> a{p2, p3, p4};
            for (int i = 0; i < 3; i++) {
                if (tempPoint.y < a[i].y) {
                    tempPoint = a[i];
                }
            }
            return tempPoint;
        }

        virtual Point bottom() {
            Point tempPoint = p1;
            std::array<Point, 3> a{p2, p3, p4};
            for (int i = 0; i < 3; i++) {
                if (tempPoint.y > a[i].y) {
                    tempPoint = a[i];
                }
            }
            return tempPoint;
        }

        virtual Point left() {
            Point tempPoint = p1;
            std::array<Point, 3> a{p2, p3, p4};
            for (int i = 0; i < 3; i++) {
                if (tempPoint.x > a[i].x) {
                    tempPoint = a[i];
                }
            }
            return tempPoint;
        }

        virtual Point right() {
            Point tempPoint = p1;
            std::array<Point, 3> a{p2, p3, p4};
            for (int i = 0; i < 3; i++) {
                if (tempPoint.x < a[i].x) {
                    tempPoint = a[i];
                }
            }
            return tempPoint;
        }

        Point p1;
        Point p2;
        Point p3;
        Point p4;
    };

    class Square : public Quad {
    public:
        Square(Point tl, Point tr, Point bl, Point br) : Quad(tl, tr, bl, br) {}

        Square(Point bl, Point tr) : Quad(bl, Point(bl.x, tr.y), tr, Point(tr.x, bl.y)) {}
    };

    class Rect : public Quad {
    public:
        Rect(Point tl, Point tr, Point bl, Point br) : Quad(tl, tr, bl, br) {}
    };

    Quad Scale(Quad* a, double scaleValue) {}

    Quad Intersect(const Quad* a, const Quad* b) {}

    Square Union(Quad a, Quad b) {
        double yBottom, yTop;
        double xLeft, xRight;
        
        yBottom = a.bottom().y < b.bottom().y ? a.bottom().y : b.bottom().y;
        yTop = a.top().y > b.top().y ? a.top().y : b.top().y;
        xLeft = a.left().x < b.left().x ? a.left().x : b.left().x;
        xRight = a.right().x > b.right().x ? a.right().x : b.right().x;
        
        return {Point(xLeft, yBottom), Point(xRight, yTop)};
    }
}


int main() {
    geo2d::orto::Quad rect = geo2d::orto::Quad(geo2d::orto::Point(0, 1),
                                               geo2d::orto::Point(1, 1),
                                               geo2d::orto::Point(0, 0),
                                               geo2d::orto::Point(1, 0));


    geo2d::orto::Quad rect2 = geo2d::orto::Quad(geo2d::orto::Point(5, 6),
                                                geo2d::orto::Point(6, 6),
                                                geo2d::orto::Point(5, 5),
                                                geo2d::orto::Point(6, 5));

    geo2d::orto::Square newR = geo2d::orto::Union(rect, rect2);
    std::cout << newR.p1 << newR.p2 << newR.p3 << newR.p4;
    return 0;
}
